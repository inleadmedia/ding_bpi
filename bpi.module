<?php
/**
 * @file
 * 
 * Main BPI module file
 * 
 */

define('BPI_PATH', drupal_get_path('module', 'bpi'));

/**
 * Implements hook_init
 */
function bpi_init() {
  drupal_add_css(BPI_PATH . '/css/bpi_search-styles.css');
}

/**
 * Implements hook_menu
 *
 * @return array
 *   An array with query responders
 */
function bpi_menu() {
  $items = array();

  // Main admin page
  $items['admin/bpi'] = array(
    'title' => 'BPI Administration',
    'description' => 'BPI administration page',
    'page callback' => 'bpi_my_nodes',
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/bpi/add_content'] = array(
    'title' => 'Add content',
    'description' => 'Add content',
    'page callback' => 'bpi_add_content',
    'access arguments' => array('access administration pages'),
    'type' => MENU_LOCAL_ACTION,
  );

  // My nodes page, same as admin
  $items['admin/bpi/my'] = array(
    'title' => 'My nodes',
    'description' => 'Nodes created by me',
    'page callback' => 'bpi_my_nodes',
    'access arguments' => array('access administration pages'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => '0',
  );

  // Syndicated nodes page
  $items['admin/bpi/syndicated'] = array(
    'title' => 'Syndicated',
    'description' => 'Nodes which you syndicated',
    'page callback' => 'bpi_syndicated_nodes',
    'access arguments' => array('access administration pages'),
    'type' => MENU_LOCAL_TASK,
    'weight' => '1',
  );

  // Channels page
  $items['admin/bpi/channels'] = array(
    'title' => 'Channels',
    'description' => 'Current available channels',
    'page callback' => 'bpi_channels',
    'access arguments' => array('access administration pages'),
    'type' => MENU_LOCAL_TASK,
    'weight' => '2',
  );

  // Favourites page
  $items['admin/bpi/favorites'] = array(
    'title' => 'Favorites',
    'description' => 'My favourites (authors, channels, etc.)',
    'page callback' => 'bpi_favorites',
    'access arguments' => array('access administration pages'),
    'type' => MENU_LOCAL_TASK,
    'weight' => '3',
  );

  // Updates page
  $items['admin/bpi/updates'] = array(
    'title' => 'Updates',
    'description' => 'Syndicated nodes which have been updated',
    'page callback' => 'bpi_updates',
    'access arguments' => array('access administration pages'),
    'type' => MENU_LOCAL_TASK,
    'weight' => '4',
  );

  // Search page
  $items['admin/bpi/search'] = array(
    'title' => 'Search',
    'description' => 'Search nodes from the well',
    'page callback' => 'bpi_search',
    'access arguments' => array('access administration pages'),
    'type' => MENU_LOCAL_TASK,
    'weight' => '5',
  );

  return $items;
}

/**
 * Implements hook_theme
 *
 * @return array
 *   Array of available themes
 */
function bpi_theme() {
  $hooks = array();

  $hooks['add_content'] = array(
    'variables' => array(),
    'template' => 'templates/bpi_add_content',
  );

  $hooks['my_nodes'] = array(
    'variables' => array(),
    'template' => 'templates/bpi_my_nodes',
  );

  $hooks['syndicated_nodes'] = array(
    'variables' => array(),
    'template' => 'templates/bpi_syndicated_nodes',
  );

  $hooks['channels'] = array(
    'variables' => array(),
    'template' => 'templates/bpi_channels',
  );

  $hooks['favorites'] = array(
    'variables' => array(),
    'template' => 'templates/bpi_favorites',
  );

  $hooks['updates'] = array(
    'variables' => array(),
    'template' => 'templates/bpi_updates',
  );

  $hooks['search'] = array(
    'variables' => array(),
    'template' => 'templates/bpi_search'
  );

  $hooks['well_node'] = array(
    'variables' => array(
      'title' => NULL,
      'description' => NULL,
      'read' => NULL,
      'rating' => NULL,
      'rated' => NULL,
      'date' => NULL,
      'author' => NULL,
      'category' => NULL,
      'syndicated' => NULL,
      'lix' => NULL, // @todo - how's that beeing translated ?!
      'library' => NULL,
      'channel' => NULL,
    ),
    'template' => 'templates/bpi_well_node'
  );

  return $hooks;
}

/**
 * 'Add content' page
 *
 * @return array
 *   Form structure
 */
function bpi_add_content() {
  return theme('add_content');
}

/**
 * 'My Nodes' page callback
 *
 * @return array
 *   Page structure
 */
function bpi_my_nodes() {
  return theme('my_nodes');
}

/**
 * 'My Nodes' page form
 *
 * @return array
 *    Form structure
 */
function bpi_my_nodes_form() {
  $form = array();

  // The sorting filter
  $form['sort_filter'] = array(
    '#type' => 'fieldset',
    '#title' => 'SHOW ONLY ITEMS WHERE',
  );

  $form['sort_filter']['status'] = array(
    '#type' => 'select',
    '#title' => 'status',
    '#options' => array(
        'any',
      ),
  );

  $form['sort_filter']['type'] = array(
    '#type' => 'select',
    '#title' => 'type',
    '#options' => array(
        'any',
      ),
  );

  $form['sort_filter']['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Filter'
  );
  // END sort filter

  // Update filter
  $form['update_filter'] = array(
    '#type' => 'fieldset',
    '#title' => 'UPDATE OPTIONS',
  );

  $form['update_filter']['action'] = array(
    '#type' => 'select',
    '#options' => array(
        'Publish selected content',
      ),
  );
  // END update filter

  $form['update_filter']['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Update'
  );

  return $form;
}

/**
 * The table/grid which contains a list of user's nodes
 *
 * @return array
 *   Form structure
 */
function bpi_my_nodes_grid() {
  $form = array();
  
  $header = array(
    array('data' => t('TITLE'), 'field' => 'node_title'),
    t('TYPE'),
    t('AUTHOR'),
    t('STATUS'),
    array('data' => t('UPDATED'), 'field' => 'node_updated', 'sort' => 'desc'),
    t('OPERATIONS'),
  );

  // @todo
  // Test purpose data for grid/table
  // Remove this after live retrieval
  $rows = array(
    array('Pa gensyn i Helsingor 2011', 'Article', l('inlead', '#'), 'published', '03/08/2011 - 15:50', l('edit', '#') . '&nbsp;&nbsp;' . l('delete', '#')),
    array('Easy Magazine 2010', 'Article', l('inlead', '#'), 'published', '03/08/2011 - 15:50', l('edit', '#') . '&nbsp;&nbsp;' . l('delete', '#')),
    array('Easy Screen pa Svendborg Bibliotek', 'Article', l('inlead', '#'), 'published', '03/08/2011 - 15:50', l('edit', '#') . '&nbsp;&nbsp;' . l('delete', '#')),
  );

  $form['grid'] = array(
    '#type' => 'tableselect',
    '#header' => $header,
    '#options' => $rows,
  );

  return $form;
}

/**
 * 'Syndicated nodes' page callback
 *
 * @return array
 *   Page structure
 */
function bpi_syndicated_nodes() {
  return theme('syndicated_nodes');
}

/**
 * 'Channels' page callback
 *
 * @return array
 *   Page structure
 */
function bpi_channels() {
  return theme('channels');
}

/**
 * 'Favorites' page callback
 *
 * @return array
 *   Page structure
 */
function bpi_favorites() {
  return theme('favorites');
}

/**
 * 'Updates' page callback
 *
 * @return array
 *   Page structure
 */
function bpi_updates() {
  return theme('updates');
}

function bpi_search() {
  return theme('search');
}

function bpi_search_filters() {
  $form = array();

  $form['type'] = array(
    '#type' => 'fieldset',
    '#title' => 'TYPE',
    '#prefix' => '<div id="bpi_search_filter">',
  );

  $form['type']['article'] = array(
    '#type' => 'checkbox',
    '#title' => 'Article'
  );

  $form['type']['event'] = array(
    '#type' => 'checkbox',
    '#title' => 'Event'
  );

  $form['type']['review'] = array(
    '#type' => 'checkbox',
    '#title' => 'Review'
  );

  $form['group'] = array(
    '#type' => 'fieldset',
    '#title' => 'TARGET GROUP',
    '#suffix' => '</div>',
  );

  $form['group']['voksne'] = array(
    '#type' => 'checkbox',
    '#title' => 'Voksne'
  );

  $form['group']['born'] = array(
    '#type' => 'checkbox',
    '#title' => 'Born'
  );

  $form['group']['unge'] = array(
    '#type' => 'checkbox',
    '#title' => 'Unge'
  );

  return $form;
}

function bpi_well_nodes() {
  $nodes = array();

  // @todo
  // Test purpose data
  // Remove that after live retrieval
  $nodes[] = array(
    'title' => 'Sommerlukket',
    'description' => 'Tekstuddrag fra artikel Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem',
    'read' => FALSE, // @todo - needs translation (dk: laest)
    'rating' => 3,
    'rated' => 17,
    'date' => '13 marts 2011',
    'author' => 'Lisbeth Hollesen',
    'category' => 'Andet',
    'syndicated' => 4,
    'lix' => 56, // @todo - needs translation
    'library' => 'Albertslund',
    'channel' => 'Nu er det sommerferie'
  );

  $nodes[] = array(
    'title' => 'Tirsdagsgodter',
    'description' => 'Tekstuddrag fra artikel Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem',
    'read' => TRUE, // @todo - needs translation (dk: laest)
    'rating' => 3,
    'rated' => 12,
    'date' => '13 marts 2011',
    'author' => 'M. Christensen',
    'category' => 'Andet',
    'syndicated' => 2,
    'lix' => 21, // @todo - needs translation
    'library' => 'Hovedbiblioteket',
    'channel' => 'Slik'
  );

  $output = '';
  foreach($nodes as $v) {
    $output .= theme('well_node', $v);
  }

  return $output;
}
