<?php
/**
 * @file
 *
 * Main BPI module file
 *
 */

define('BPI_PATH', drupal_get_path('module', 'bpi'));

/**
 * Implements hook_init().
 */
function bpi_init() {
  drupal_add_css(BPI_PATH . '/css/bpi_styles.css');
  drupal_add_library('system', 'drupal.ajax');
  drupal_add_library('system', 'jquery.form');
}

/**
 * Implements hook_menu().
 *
 * @return array
 *   An array with query responders
 */
function bpi_menu() {
  $items = array();

  // Updates page
  $items['admin/content/updates'] = array(
    'title' => 'Updates',
    'description' => 'Syndicated nodes which have been updated',
    'page callback' => 'bpi_updates',
    'access arguments' => array('access administration pages'),
    'type' => MENU_LOCAL_TASK,
    'weight' => '2',
  );

  // Syndicated nodes page
  $items['admin/content/syndicated'] = array(
    'title' => 'Syndicated',
    'description' => 'Nodes which you syndicated',
    'page callback' => 'bpi_syndicated_nodes',
    'access arguments' => array('access administration pages'),
    'type' => MENU_LOCAL_TASK,
    'weight' => '3',
  );

  // Channels page
  $items['admin/content/channels'] = array(
    'title' => 'Channels',
    'description' => 'Current available channels',
    'page callback' => 'bpi_channels',
    'access arguments' => array('access administration pages'),
    'type' => MENU_LOCAL_TASK,
    'weight' => '4',
  );

  // Channel view page
  $items['admin/content/channels/view/%'] = array(
    'title' => 'View channel',
    'description' => 'Display the node assiged to this channel',
    'page callback' => 'bpi_channels_view',
    'page arguments' => array(4),
    'access arguments' => array('access administration pages'),
    'type' => MENU_CALLBACK,
  );

  // Add channel link
  $items['admin/content/channels/add'] = array(
    'title' => 'New channel',
    'description' => 'Create channels and assign nodes',
    'page callback' => 'bpi_channels_add',
    'access arguments' => array('access administration pages'),
  );

  // Favorites page
  $items['admin/content/favorites'] = array(
    'title' => 'Favorites',
    'description' => 'Favorites (channels, authors, etc.)',
    'page callback' => 'bpi_favorites',
    'access arguments' => array('access administration pages'),
    'type' => MENU_LOCAL_TASK,
    'weight' => '5',
  );

  // Search page
  $items['admin/content/search'] = array(
    'title' => 'Search',
    'description' => 'Search nodes from the well',
    'page callback' => 'bpi_search',
    'access arguments' => array('access administration pages'),
    'type' => MENU_LOCAL_TASK,
    'weight' => '6',
  );

  $items['admin/content/subscriptions'] = array(
    'title' => 'Subscriptions',
    'description' => 'Subscribe to variuos vategories of nodes',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bpi_subscribe_form'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_LOCAL_TASK,
    'weight' => '7',
  );

  $items['admin/content/ajax/channel/%/invite'] = array(
    'page arguments' => array(2, 4),
    'access arguments' => array('access administration pages'),
    'type' => MENU_CALLBACK,
    'page callback' => 'bpi_ajax_channel_invite',
  );

  $items['admin/content/ajax/channel/%/edit'] = array(
    'page arguments' => array(2, 4),
    'access arguments' => array('access administration pages'),
    'type' => MENU_CALLBACK,
    'page callback' => 'bpi_ajax_channel_edit',
  );

  $items['admin/content/ajax/channel/%/delete'] = array(
    'page arguments' => array(2, 4),
    'access arguments' => array('access administration pages'),
    'type' => MENU_CALLBACK,
    'page callback' => 'bpi_ajax_channel_delete',
  );

  $items['admin/content/ajax/node/%/syndicate'] = array(
    'page arguments' => array(2, 4),
    'access arguments' => array('access administration pages'),
    'type' => MENU_CALLBACK,
    'page callback' => 'bpi_ajax_node_syndicate',
  );

  $items['admin/content/ajax/node/%/subscribed_users'] = array(
    'page arguments' => array(2, 4),
    'access arguments' => array('access administration pages'),
    'type' => MENU_CALLBACK,
    'page callback' => 'bpi_ajax_channel_subscribed_users',
  );

  return $items;
}

/**
 * Implements menu_local_tasks_alter
 *
 * Adds a new menu item to specific pages
 */
function bpi_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  if ($root_path == 'admin/content/channels') {
    $item = menu_get_item('admin/content/channels/add');
    if ($item['access']) {
      $data['actions']['output'][] = array(
        '#theme' => 'menu_local_action',
        '#link' => $item,
      );
    }
  }
}

/**
 * Implement hook_form_alter().
 *
 * Alters the standart node form
 */
function bpi_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'node_admin_content') {
    // Cols and rows
    $header = $form['admin']['nodes']['#header'];
    $rows = $form['admin']['nodes']['#options'];

    // Add a custom col
    $header['rating'] = array(
      'data' => 'Add to Favorites',
    );

    // Add a custom data to row
    // Node ID required as array key
    foreach ($rows as $k => $v) {
      $rows[$k]['rating'] = theme('bpi_flag_dropdown', array('selected' => NULL, 'nid' => $k));

      $node_status = db_select('bpi_node')
        ->fields('bpi_node', array('publish_status', 'in_well'))
        ->condition('nid', $k)
        ->execute()
        ->fetchAssoc();

      $rows[$k]['status'] = theme(
        'bpi_node_publish_status',
        array(
          'syndicated' => $node_status['publish_status'],
          'in_well' => $node_status['in_well']
        )
      );
    }

    $header['status'] = array(
      'data' => 'Publish status'
    );
    $form['admin']['nodes']['#header'] = $header;
    $form['admin']['nodes']['#options'] = $rows;

    // Add contextual menu to content grid
    $form['admin']['options']['#suffix'] = theme('bpi_contextual_menu');

    $form['#attached']['js'] = array(
      BPI_PATH . '/js/context_menu.js',
      BPI_PATH . '/js/bpi_grid_scripts.js',
    );

    $form['#attached']['css'] = array(
      BPI_PATH . '/css/context_menu.css',
    );
  }
}

/**
 * Implements hook_node_insert().
 *
 * Saves custom node data
 */
function bpi_node_insert($node) {
  db_insert('bpi_node')
  ->fields(array(
    'nid' => $node->nid,
    'syndicated' => $node->syndicated,
    'library' => $node->library,
    'channel' => $node->channel,
    'favorites' => $node->favorites,
    'publish_status' => $node->publish_status,
    'in_well' => $node->in_well,
  ))
  ->execute();
}

/**
 * Implements hook_theme().
 *
 * @return array
 *   Array of available themes
 */
function bpi_theme($existing, $type, $theme, $path) {
  $hooks = array();

  $hooks['bpi_flag_dropdown'] = array(
    'variables' => array(
      'selected' => NULL,
      'nid' => NULL
    ),
    'path' => BPI_PATH . '/templates',
    'template' => 'bpi_flag_dropdown',
  );

  $hooks['subscribed_users'] = array(
    'variables' => array(),
    'template' => 'templates/bpi_subscribed_users',
  );

  $hooks['bpi_syndicated_nodes_form'] = array(
    'render element' => 'form',
    'path' => BPI_PATH . '/templates',
    'template' => 'bpi_syndicated_nodes',
  );

  $hooks['bpi_channels_form'] = array(
    'render element' => 'form',
    'path' => BPI_PATH . '/templates',
    'template' => 'bpi_channels',
  );

  $hooks['bpi_favorites_form'] = array(
    'render element' => 'form',
    'path' => BPI_PATH . '/templates',
    'template' => 'bpi_favorites',
  );

  $hooks['bpi_updates_form'] = array(
    'render element' => 'form',
    'path' => BPI_PATH . '/templates',
    'template' => 'bpi_updates',
  );

  $hooks['bpi_search_form'] = array(
    'render element' => 'form',
    'path' => BPI_PATH . '/templates',
    'template' => 'bpi_search',
  );

  $hooks['well_node'] = array(
    'variables' => array(
      'title' => NULL,
      'description' => NULL,
      'read' => NULL,
      'rating' => NULL,
      'rated' => NULL,
      'date' => NULL,
      'author' => NULL,
      'category' => NULL,
      'syndicated' => NULL,
      'lix' => NULL, // @todo - how's that beeing translated ?!
      'library' => NULL,
      'channel' => NULL,
    ),
    'template' => 'templates/bpi_well_node',
  );

  $hooks['bpi_node_edit_form'] = array(
    'render element' => 'form',
    'path' => BPI_PATH . '/templates',
    'template' => 'bpi_edit_node',
  );

  $hooks['node_info'] = array(
    'variables' => array('node_id' => NULL),
    'path' => BPI_PATH . '/templates',
    'template' => 'bpi_edit_node_info',
  );

  $hooks['bpi_contextual_menu'] = array(
    'variables' => array(),
    'path' => BPI_PATH . '/templates',
    'template' => 'bpi_contextual_menu',
  );

  $hooks['bpi_node_publish_status'] = array(
    'variables' => array('syndicated' => NULL, 'in_well' => NULL),
    'path' => BPI_PATH . '/templates',
    'template' => 'bpi_node_publish_status',
  );

  return $hooks;
}

/**
 * 'Syndicated nodes' page callback
 *
 * @return array
 *   Page structure
 */
function bpi_syndicated_nodes() {
  $data = array();
  $data['grid_rows'] = array();

  // Get the syndicated nodes id's
  $syndicated = db_select('bpi_node')
    ->fields('bpi_node', array('nid', 'library', 'favorites', 'publish_status', 'in_well'))
    ->condition('syndicated', 1)
    ->execute()
    ->fetchAll();

  foreach($syndicated as $k => $v) {
    // Fetch the node data
    $node = db_select('node')
      ->fields('node', array('type', 'title', 'uid', 'created', 'changed'))
      ->condition('nid', $v->nid)
      ->execute()
      ->fetchAssoc();

    // Fetch the author
    $author = db_select('users')
      ->fields('users', array('name'))
      ->condition('uid', $node['uid'])
      ->execute()
      ->fetchField(0);

    // Populate the data grid
    $data['grid_rows'][] = array(
      '<a href="/node/' . $v->nid . '">' . $node['title'] . '</a>' .
        theme('mark', array('type' => node_mark($v->nid, $node['changed']))),
      $node['type'],
      '<a property="foaf:name" typeof="sioc:UserAccount" about="/user/' . $node['uid']
        . '" xml:lang="" class="username" title="View user profile." href="/user/' . $node['uid']
        . '">' . $author . '</a>',
      theme(
        'bpi_node_publish_status',
        array(
          'syndicated' => $v->publish_status,
          'in_well' => $v->in_well
        )
      ),
      date('d.m.Y H:i:s', $node['changed']),
      date('d.m.Y H:i:s', $node['created']),
      $v->library,
      '<ul class="links inline">
         <li class="edit first"><a href="/node/' . $v->nid . '/edit?destination=admin/content">edit</a></li>
         <li class="delete last"><a href="/node/' . $v->nid . '/delete?destination=admin/content">delete</a></li>
       </ul>',
      theme('bpi_flag_dropdown', array('selected' => $v->favorites, 'nid' => $v->nid)),
    );
  }

  return drupal_get_form('bpi_syndicated_nodes_form', $data);
}

/**
 * Syndicated nodes form
 *
 * @param $form
 *   Form structure
 * @param $form_state
 *   Form state
 * @param $form_data
 *   Additional data passed to form
 */
function bpi_syndicated_nodes_form($form, &$form_state, $form_data = array()) {
  $form['sort_filter'] = array(
    '#type' => 'fieldset',
    '#title' => 'SHOW ONLY ITEMS WHERE',
  );

  $form['sort_filter']['status'] = array(
    '#type' => 'select',
    '#title' => 'status',
    '#options' => array(
        'any',
    ),
  );

  $form['sort_filter']['type'] = array(
    '#type' => 'select',
    '#title' => 'type',
    '#options' => array(
        'any',
    ),
  );

  $form['sort_filter']['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Filter'
  );

  $form['update_filter'] = array(
    '#type' => 'fieldset',
    '#title' => 'UPDATE OPTIONS',
  );

  $form['update_filter']['action'] = array(
    '#type' => 'select',
    '#options' => array(
        'Delete selected content',
      ),
  );

  $form['update_filter']['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Update'
  );

  $header = array(
    array('data' => t('Title'), 'field' => 'node_title'),
    array('data' => t('Type'), 'field' => 'node_type'),
    t('Author'),
    array('data' => t('Publish Status'), 'field' => 'node_status'),
    array('data' => t('Updated'), 'field' => 'node_updated', 'sort' => 'desc'),
    array('data' => t('Syndicated'), 'field' => 'node_syndicated'),
    array('data' => t('Library'), 'field' => 'node_library'),
    t('Operations'),
    'Add to Favorites'
  );

  $form['grid'] = array(
    '#type' => 'tableselect',
    '#header' => $header,
    '#options' => $form_data['grid_rows'],
    '#suffix' => theme('bpi_contextual_menu'),
  );

  $form['#attached']['js'] = array(
    BPI_PATH . '/js/context_menu.js',
    BPI_PATH . '/js/bpi_grid_scripts.js',
  );

  $form['#attached']['css'] = array(
    BPI_PATH . '/css/context_menu.css',
  );

  return $form;
}

/**
 * AJAX responder for node syndication
 *
 * @param $type
 *   Query type
 * @param $node_id
 *   Node id
 */
function bpi_ajax_node_syndicate($type = 'ajax', $node_id = 0) {
  if ($type == 'ajax') {
    if ($node_id > 0) {
      $commands = array();

      $commands[] = ajax_command_alert('You successfuly syndicated this node.');

      ajax_deliver(array('#type' => 'ajax', '#commands' => $commands));
    }
  }
}

/**
 * 'Channels' page callback
 *
 * @return array
 *   Page structure
 */
function bpi_channels() {
  $data = array();
  $data['grid_rows'] = array();

  $channels = db_select('bpi_node')
    ->fields('bpi_node', array('channel'))
    ->Distinct()
    ->execute()
    ->fetchAll();

  foreach($channels as $k => $v) {
    $count = db_select('bpi_node')
      ->condition('channel', $v->channel)
      ->countQuery()
      ->execute()
      ->fetchField(0);

    $channel = db_select('bpi_channel')
      ->fields('bpi_channel', array('name'))
      ->condition('id', $v->channel)
      ->execute()
      ->fetchField(0);

    $data['grid_rows'][] = array(
      $channel . '<br />' .
        l('Invite', 'admin/content/ajax/channel/' . $v->channel . '/invite', array('attributes' => array('class' => array('use-ajax')))),
      $count . '<br /><a href="/admin/content">view nodes</a>',
      '0',
      '<ul class="links inline">
         <li class="edit first"><a href="/admin/content">edit</a></li>
         <li class="delete last"><a href="/admin/content">delete</a></li>
      </ul>'
    );
  }

  return drupal_get_form('bpi_channels_form', $data);
}

/**
 * Channels page form
 *
 * @param $form
 *   Form structure
 * @param $form_state
 *   Form state
 * @param $form_data
 *   Additional data passed to form
 */
function bpi_channels_form($form, &$form_state, $form_data) {
  $header = array(
    t('Name'),
    t('Nodes'),
    t('Subscribed users'),
    t('Operations')
  );

  $form['filter'] = array(
    '#type' => 'select',
    '#options' => array(
      'All channels',
      'My channels',
      'Subscribed',
    ),
    '#title' => 'Show only:'
  );

  $form['grid'] = array(
    '#type' => 'tableselect',
    '#header' => $header,
    '#options' => $form_data['grid_rows'],
  );

  return $form;
}

function bpi_channels_view($channel_id) {

}

function bpi_channels_add() {

}

/**
 * Form for channel invitation
 *
 * @param $form
 *   Form structure
 * @param $form_state
 *   Form state
 * @param $form_data
 *   Additional data passed to form
 */
function bpi_channels_invite_form($form, &$form_state, $form_data) {
  $form['name'] = array(
    '#type' => 'textfield',
    '#name' => 'name',
    '#title' => 'Enter name'
  );

  $form['invite'] = array(
    '#type' => 'button',
    '#value' => 'Invite',
    '#ajax' => array(
      'callback' => 'bpi_ajax_channel_invite_close'
    )
  );

  $form['close'] = array(
    '#type' => 'button',
    '#value' => 'Close',
    '#ajax' => array(
      'callback' => 'bpi_ajax_channel_invite_close'
    )
  );

  return $form;
}

/**
 * Ajax callback method, preparing commands for invite popup
 *
 * @param $type
 * @param $channel_id
 */
function bpi_ajax_channel_invite($type = 'ajax', $channel_id = 0) {
  if ($type == 'ajax') {
    if ($channel_id != 0) {
      $commands = array();

      $commands[] = ajax_command_ding_popup(
        'invite_form',
        'Invite to channel',
        drupal_render(drupal_get_form('bpi_channels_invite_form')));

      ajax_deliver(array('#type' => 'ajax', '#commands' => $commands));
    }
  }
}

/**
 * Ajax callback method to close invite form
 */
function bpi_ajax_channel_invite_close() {
  return array('#type' => 'ajax', '#commands' => array(ajax_command_ding_popup_close('invite_form')));
}

/**
 * Ajax callback method, preparing commands for subscribed users popup
 *
 * @param string $type
 * @param integer $channel_id
 */
function bpi_ajax_channel_subscribed_users($type, $channel_id) {
  if ($channel_id != 0) {
      $commands = array();

      $commands[] = ajax_command_ding_popup(
        'invite_form',
        'Subscribed users',
        theme('subscribed_users'));

      ajax_deliver(array('#type' => 'ajax', '#commands' => $commands));
    }
}

/**
 * 'Favorites' page callback
 *
 * @return array
 *   Page structure
 */
function bpi_favorites() {
  $data = array();
  $data['grid_rows'] = array();

  $favorites = db_select('bpi_node')
    ->fields('bpi_node', array('nid', 'favorites', 'publish_status', 'in_well'))
    ->condition('favorites', serialize(array(0, 0, 0, 0)), '!=')
    ->execute()
    ->fetchAll();

  foreach($favorites as $k => $v) {
    $node = db_select('node')
      ->fields('node', array('title', 'type', 'uid', 'status', 'created', 'changed'))
      ->condition('nid', $v->nid)
      ->execute()
      ->fetchAssoc();

    $author = db_select('users')
      ->fields('users', array('name'))
      ->condition('uid', $node['uid'])
      ->execute()
      ->fetchField(0);

    $data['grid_rows'][] = array(
      theme('bpi_flag_dropdown', array('selected' => $v->favorites, 'nid' => $v->nid)),
      '<a href="/node/' . $v->nid . '">' . $node['title'] . '</a>',
      $node['type'],
      '<a property="foaf:name" typeof="sioc:UserAccount" about="/user/' . $node['uid'] . '" xml:lang="" class="username" title="View user profile." href="/user/' . $node['uid'] . '">' . $author . '</a>',
      theme(
        'bpi_node_publish_status',
        array(
          'syndicated' => $v->publish_status,
          'in_well' => $v->in_well
        )
      ),
      date('d.m.Y H:i:s', $node['changed']),
      '<ul class="links inline">
         <li class="edit first"><a href="/node/' . $v->nid . '/edit?destination=admin/content">edit</a></li>
        <li class="delete last"><a href="/node/' . $v->nid . '/delete?destination=admin/content">delete</a></li>
      </ul>'
    );
  }

  return drupal_get_form('bpi_favorites_form', $data);
}

/**
 * Favorites page form
 *
 * @param $form
 *   Form structure
 * @param $form_state
 *   Form state
 * @param $form_data
 *   Additional data passed to form
 */
function bpi_favorites_form($form, &$form_state, $form_data) {
  $header = array(
    array('data' => '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'),
    array('data' => 'title', 'field' => 'n.title'),
    'type',
    array('data' => 'author', 'field' => 'n.author'),
    'publish status',
    array('data' => 'updated', 'field' => 'n.updated'),
    'operations',
  );

  $form['show_green'] = array(
    '#type' => 'checkbox',
    '#default_value' => 1,
    '#prefix' => '<img src="/' . BPI_PATH . '/img/flag_green.jpg" />',
  );

  $form['show_yellow'] = array(
    '#type' => 'checkbox',
    '#default_value' => 1,
    '#prefix' => '<img src="/' . BPI_PATH . '/img/flag_yellow.jpg" />',
  );

  $form['show_red'] = array(
    '#type' => 'checkbox',
    '#default_value' => 1,
    '#prefix' => '<img src="/' . BPI_PATH . '/img/flag_red.jpg" />',
  );

  $form['grid'] = array(
    '#type' => 'tableselect',
    '#header' => $header,
    '#options' => $form_data['grid_rows'],
  );

  $form['operations'] = array(
    '#type' => 'select',
    '#options' => array('Remove from favorites'),
    '#title' => 'With selected: ',
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Submit',
    '#suffix' => theme('bpi_contextual_menu'),
  );

  $form['#attached']['js'] = array(
    BPI_PATH . '/js/context_menu.js',
    BPI_PATH . '/js/bpi_grid_scripts.js',
  );

  $form['#attached']['css'] = array(
    BPI_PATH . '/css/context_menu.css',
  );

  return $form;
}

/**
 * 'Updates' page callback
 *
 * @return array
 *   Page structure
 */
function bpi_updates() {
  $data = array();
  $data['grid_rows'] = array();

  // Fetch nodes
  $updated = db_select('node')
    ->fields('node', array('nid', 'type', 'title', 'uid', 'status', 'created', 'changed'))
    ->execute()
    ->fetchAll();

  foreach($updated as $k => $v) {
    if (node_mark($v->nid, $v->changed) == 0) {
      continue;
    }

    // Fetch node author
    $author = db_select('users')
      ->fields('users', array('name'))
      ->condition('uid', $v->uid)
      ->execute()
      ->fetchField(0);

    // Fetch bpi_node data
    $bpi_node = db_select('bpi_node')
      ->fields('bpi_node', array('library', 'favorites', 'publish_status', 'in_well'))
      ->condition('nid', $v->nid)
      ->execute()
      ->fetchAssoc();

    $is_new = db_select('history')
      ->fields('history', array('uid'))
      ->condition('nid', $v->nid)
      ->condition('uid', $v->uid)
      ->execute()
      ->rowCount();

    // Populate the data grid
    $data['grid_rows'][] = array(
      '<a href="/node/' . $v->nid . '">' . $v->title . '</a>' . theme('mark', array('type' => node_mark($v->nid, $v->changed))),
      $v->type,
      '<a property="foaf:name" typeof="sioc:UserAccount" about="/user/' . $v->uid
            . '" xml:lang="" class="username" title="View user profile." href="/user/' . $v->uid
            . '">' . $author . '</a>',
      theme(
        'bpi_node_publish_status',
        array(
          'syndicated' => $bpi_node['publish_status'],
          'in_well' => $bpi_node['in_well']
        )
      ),
      date('d.m.Y H:i:s', $v->changed),
      date('d.m.Y H:i:s', $v->created),
      $bpi_node['library'],
      '<ul class="links inline">
         <li class="edit first"><a href="/node/' . $v->nid . '/edit?destination=admin/content">edit</a></li>
         <li class="delete last"><a href="/node/' . $v->nid . '/delete?destination=admin/content">delete</a></li>
      </ul>',
      theme('bpi_flag_dropdown', array('selected' => $bpi_node['favorites'], 'nid' => $v->nid)),
    );
  }

  return drupal_get_form('bpi_updates_form', $data);
}

/**
 * Updates page form
 *
 * @param $form
 *   Form structure
 * @param $form_state
 *   Form state
 * @param $form_data
 *   Additional data passed to form
 */
function bpi_updates_form($form, &$form_state, $form_data) {
  $header = array(
    array('data' => t('Title'), 'field' => 'node_title'),
    array('data' => t('Type'), 'field' => 'node_type'),
    t('Author'),
    array('data' => t('Publish Status'), 'field' => 'node_status'),
    array('data' => t('Updated'), 'field' => 'node_updated', 'sort' => 'desc'),
    array('data' => t('Syndicated'), 'field' => 'node_syndicated'),
    array('data' => t('Library'), 'field' => 'node_library'),
    t('Operations'),
    'Add to Favorites'
  );

  $form['filter'] = array(
    '#type' => 'select',
    '#title' => 'Show only',
    '#options' => array(
      'All', 'New', 'Updated'
    ),
  );

  $form['grid'] = array(
    '#type' => 'tableselect',
    '#header' => $header,
    '#options' => $form_data['grid_rows'],
    '#suffix' => theme('bpi_contextual_menu'),
  );

  $form['#attached']['js'] = array(
    BPI_PATH . '/js/context_menu.js',
    BPI_PATH . '/js/bpi_grid_scripts.js',
  );

  $form['#attached']['css'] = array(
    BPI_PATH . '/css/context_menu.css',
  );

  return $form;
}

/**
 * 'Search' page callback
 *
 * @return array
 *   Page structure
 */
function bpi_search() {
  $data = array();

  return drupal_get_form('bpi_search_form', $data);
}

/**
 * Search page form
 *
 * @param $form
 *   Form structure
 * @param $form_state
 *   Form state
 * @param $form_data
 *   Additional data passed to form
 */
function bpi_search_form($form, &$form_state, $form_data) {

  $form['search'] = array(
    '#type' => 'textfield',
    '#title' => 'Search for: ',
    '#required' => TRUE,
    '#prefix' => '<div id="search_form">',
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Search',
    '#suffix' => '</div>'
  );

  $form['type'] = array(
    '#type' => 'fieldset',
    '#title' => 'TYPE',
    '#prefix' => '<div id="bpi_search_filter">',
  );

  $form['type']['article'] = array(
    '#type' => 'checkbox',
    '#title' => 'Article'
  );

  $form['type']['event'] = array(
    '#type' => 'checkbox',
    '#title' => 'Event'
  );

  $form['type']['review'] = array(
    '#type' => 'checkbox',
    '#title' => 'Review'
  );

  $form['group'] = array(
    '#type' => 'fieldset',
    '#title' => 'TARGET GROUP',
    '#suffix' => '</div>'
  );

  $form['group']['adults'] = array(
    '#type' => 'checkbox',
    '#title' => 'Adults'
  );

  $form['group']['born'] = array(
    '#type' => 'checkbox',
    '#title' => 'Born' // @todo - translate 'Born'
  );

  $form['group']['young'] = array(
    '#type' => 'checkbox',
    '#title' => 'Young',
  );

  $form['#attached']['js'] = array(
    BPI_PATH . '/js/context_menu.js',
    BPI_PATH . '/js/bpi_grid_scripts.js',
  );

  $form['#attached']['css'] = array(
    BPI_PATH . '/css/dropdown.css',
  );

  return $form;
}

function bpi_well_nodes() {
  $nodes = array();

  // @todo
  // Test purpose data
  // Remove that after live retrieval
  $nodes[] = array(
    'title' => 'Sommerlukket',
    'description' => 'Tekstuddrag fra artikel Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem',
    'read' => FALSE, // @todo - needs translation (dk: laest)
    'rating' => 3,
    'rated' => 17,
    'date' => '13 marts 2011',
    'author' => 'Lisbeth Hollesen',
    'category' => 'Andet',
    'syndicated' => 4,
    'lix' => 56, // @todo - needs translation
    'library' => 'Albertslund',
    'channel' => 'Nu er det sommerferie'
  );

  $nodes[] = array(
    'title' => 'Tirsdagsgodter',
    'description' => 'Tekstuddrag fra artikel Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem',
    'read' => TRUE, // @todo - needs translation (dk: laest)
    'rating' => 3,
    'rated' => 12,
    'date' => '13 marts 2011',
    'author' => 'M. Christensen',
    'category' => 'Andet',
    'syndicated' => 2,
    'lix' => 21, // @todo - needs translation
    'library' => 'Hovedbiblioteket',
    'channel' => 'Slik'
  );

  $output = '';
  foreach($nodes as $v) {
    $output .= theme('well_node', $v);
  }

  return $output;
}

function bpi_node_edit($node_id) {
  // @todo
  // Here should be placed node retrieval routine
  // As for now it's a dummy data, remove after normal fetch

  $data = array(
      'id' => $node_id,
      'title' => 'Trololo',
      'teaser' => 'Lorem ipsum dolor sit amet consectetuer adispcing elit',
      'body' => 'As for 2039, a number of professional astronomers predicted that,
        Apophis asteroid, discovered in 2004, could change it\'s orbit in a way
        that it could cross the Earth\'s orbit. Although due to huge amount of gravity
        that Sun is creating, in such large timespan it\'s truly hard to predict how exactly
        the orbit of Apophis will lay through space. In case of direct hit, this 900
        meters rock, could produce an impact equalised to 2000 megatomb nuclear bomb with
        total destruction in range of 60 miles and produce blast wind with a velocity
        700 meters per second...',
      'operations' => array(
        'auto_update' => TRUE,
        'copy_images' => FALSE,
        'local_changes' => FALSE,
        'auto_publish' => FALSE,
        'auto_promote' => FALSE,
        'references_ting' => FALSE,
        'references_links' => FALSE,
        'syndication_changes' => FALSE,
        'view_syndication' => FALSE,
      ),
      'images' => array(),
  );

  //return drupal_get_form(bpi_node_edit_form, $data);
  return drupal_get_form('bpi_node_edit_form', $data);
}

function template_preprocess_bpi_node_edit_form(&$variables) {

}

function bpi_node_edit_form($form, &$form_state, $form_data) {
  $form['id'] = array(
    '#type' => 'hidden',
    '#value' => $form_data['id'],
  );

  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => 'Title',
    '#required' => TRUE,
    '#value' => (isset($form_data['title'])) ? $form_data['title'] : '',
  );

  $form['body'] = array(
    '#type' => 'textarea',
    '#title' => 'Body',
    '#default_value' => (isset($form_data['body'])) ? $form_data['body'] : '',
  );

  $form['teaser'] = array(
    '#type' => 'textarea',
    '#title' => 'Teaser',
    '#default_value' => (isset($form_data['teaser'])) ? $form_data['teaser'] : '',
  );

  $form['auto_update'] = array(
    '#type' => 'checkbox',
    '#title' => 'Activate auto update?',
    '#default_value' => (
          isset($form_data['operations']['auto_update']) &&
          $form_data['operations']['auto_update'] == TRUE) ?
            1 : 0,
  );

  $form['copy_images'] = array(
    '#type' => 'checkbox',
    '#title' => 'Copy images?',
    '#default_value' => (
          isset($form_data['operations']['copy_images']) &&
          $form_data['operations']['copy_images'] == TRUE) ?
            1 : 0,
  );

  $form['local_changes'] = array(
    '#type' => 'checkbox',
    '#title' => 'Make changes locally?',
    '#default_value' => (
          isset($form_data['operations']['local_changes']) &&
          $form_data['operations']['local_changes'] == TRUE) ?
            1 : 0,
  );

  $form['auto_publish'] = array(
    '#type' => 'checkbox',
    '#title' => 'Auto publish locally?',
    '#default_value' => (
          isset($form_data['operations']['auto_publish']) &&
          $form_data['operations']['auto_publish'] == TRUE) ?
            1 : 0,
  );

  $form['auto_promote'] = array(
    '#type' => 'checkbox',
    '#title' => 'Auto promote to frontpage?',
    '#default_value' => (
          isset($form_data['operations']['auto_promote']) &&
          $form_data['operations']['auto_promote'] == TRUE) ?
            1 : 0,
  );

  $form['references_ting'] = array(
    '#type' => 'checkbox',
    '#title' => 'Remove references (TING)?',
    '#default_value' => (
          isset($form_data['operations']['references_ting']) &&
          $form_data['operations']['references_ting'] == TRUE) ?
            1 : 0,
  );

  $form['references_links'] = array(
    '#type' => 'checkbox',
    '#title' => 'Remove references (links)?',
    '#default_value' => (
          isset($form_data['operations']['references_links']) &&
          $form_data['operations']['references_links'] == TRUE) ?
            1 : 0,
  );

  $form['syndication_changes'] = array(
    '#type' => 'checkbox',
    '#title' => 'Make changes after syndication?',
    '#default_value' => (
          isset($form_data['operations']['syndication_changes']) &&
          $form_data['operations']['syndication_changes'] == TRUE) ?
            1 : 0,
  );

  $form['view_syndication'] = array(
    '#type' => 'checkbox',
    '#title' => 'View node after syndication?',
    '#default_value' => (
          isset($form_data['operations']['syndication_changes']) &&
          $form_data['operations']['view_syndication'] == TRUE) ?
            1 : 0,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Submit'
  );

  return $form;
}

function bpi_node_info($node_id = 0) {
  $data = array();

  if ($node_id > 0) {
    $data = array('node_info' => array(
        'pic_copy' => TRUE,
        'references' => TRUE,
        'author' => 'Birgitte Hansen',
        'library' => 'Gladsaxe Bibliotekerne',
        'created' => '04-05-2011 15:10',
        'category' => 'Sports',
        'target' => 'Adults',
        'channel' => array(
          'this_is_nice',
          'favoriteNodes'
        ),
        'lix' => 1823));
  }

  return $data;
}

function bpi_node_edit_form_submit($form, &$form_state) {

}

/**
 * Subscriptions page form
 *
 * @param $form
 *   Form structure
 * @param $form_state
 *   Form state
 */
function bpi_subscribe_form($form, &$form_state) {
  $form['subscribe_audience'] = array(
    '#type' => 'checkboxes',
    '#title' => 'Target audience:',
    '#options' => array(
      'Adults',
      'Seniors',
      'Children'
    ),
  );

  $form['subscribe_author'] = array(
    '#type' => 'checkboxes',
    '#title' => 'Author:',
    '#options' => array(
      'Peter',
      'Jan',
      'Batman'
    ),
  );

  $form['subscribe_library'] = array(
    '#type' => 'checkboxes',
    '#title' => 'Library:',
    '#options' => array(
      'Library A',
      'Library B',
      'Library C'
    ),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Submit',
  );

  return $form;
}
