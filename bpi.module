<?php
/**
 * @file
 * 
 * Main BPI module file
 * 
 */

define('BPI_PATH', drupal_get_path('module', 'bpi'));

/**
 * Implements hook_init
 */
function bpi_init() {
  drupal_add_css(BPI_PATH . '/css/bpi-styles.css');
}

/**
 * Implements hook_menu
 *
 * @return array
 *   An array with query responders
 */
function bpi_menu() {
  $items = array();

  // Main admin page
  $items['admin/bpi'] = array(
    'title' => 'BPI Administration',
    'description' => 'BPI administration page',
    'page callback' => 'bpi_my_nodes',
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );

  // Add content page
  $items['admin/bpi/add_content'] = array(
    'title' => 'Add content',
    'description' => 'Add content',
    'page callback' => 'bpi_add_content',
    'access arguments' => array('access administration pages'),
    'type' => MENU_LOCAL_ACTION,
  );

  // My nodes page, same as admin
  $items['admin/bpi/my'] = array(
    'title' => 'My nodes',
    'description' => 'Nodes created by me',
    'page callback' => 'bpi_my_nodes',
    'access arguments' => array('access administration pages'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => '0',
  );

  // Syndicated nodes page
  $items['admin/bpi/syndicated'] = array(
    'title' => 'Syndicated',
    'description' => 'Nodes which you syndicated',
    'page callback' => 'bpi_syndicated_nodes',
    'access arguments' => array('access administration pages'),
    'type' => MENU_LOCAL_TASK,
    'weight' => '1',
  );

  // Channels page
  $items['admin/bpi/channels'] = array(
    'title' => 'Channels',
    'description' => 'Current available channels',
    'page callback' => 'bpi_channels',
    'access arguments' => array('access administration pages'),
    'type' => MENU_LOCAL_TASK,
    'weight' => '2',
  );

  // Favourites page
  $items['admin/bpi/favorites'] = array(
    'title' => 'Favorites',
    'description' => 'My favourites (authors, channels, etc.)',
    'page callback' => 'bpi_favorites',
    'access arguments' => array('access administration pages'),
    'type' => MENU_LOCAL_TASK,
    'weight' => '3',
  );

  // Updates page
  $items['admin/bpi/updates'] = array(
    'title' => 'Updates',
    'description' => 'Syndicated nodes which have been updated',
    'page callback' => 'bpi_updates',
    'access arguments' => array('access administration pages'),
    'type' => MENU_LOCAL_TASK,
    'weight' => '4',
  );

  // Search page
  $items['admin/bpi/search'] = array(
    'title' => 'Search',
    'description' => 'Search nodes from the well',
    'page callback' => 'bpi_search',
    'access arguments' => array('access administration pages'),
    'type' => MENU_LOCAL_TASK,
    'weight' => '5',
  );

  // Edit node page
  $items['admin/bpi/node/edit/%'] = array(
    'title' => 'Edit node',
    'description' => 'Edit page for your own node',
    'page callback' => 'bpi_node_edit',
    'access arguments' => array('access administration pages'),
    'page arguments' => array(4),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_theme
 *
 * @return array
 *   Array of available themes
 */
function bpi_theme() {
  $hooks = array();

  $hooks['add_content'] = array(
    'variables' => array(),
    'template' => 'templates/bpi_add_content',
  );

  $hooks['my_nodes'] = array(
    'variables' => array(),
    'template' => 'templates/bpi_my_nodes',
  );

  $hooks['syndicated_nodes'] = array(
    'variables' => array(),
    'template' => 'templates/bpi_syndicated_nodes',
  );

  $hooks['channels'] = array(
    'variables' => array(),
    'template' => 'templates/bpi_channels',
  );

  $hooks['favorites'] = array(
    'variables' => array(),
    'template' => 'templates/bpi_favorites',
  );

  $hooks['updates'] = array(
    'variables' => array(),
    'template' => 'templates/bpi_updates',
  );

  $hooks['search'] = array(
    'variables' => array(),
    'template' => 'templates/bpi_search'
  );

  $hooks['well_node'] = array(
    'variables' => array(
      'title' => NULL,
      'description' => NULL,
      'read' => NULL,
      'rating' => NULL,
      'rated' => NULL,
      'date' => NULL,
      'author' => NULL,
      'category' => NULL,
      'syndicated' => NULL,
      'lix' => NULL, // @todo - how's that beeing translated ?!
      'library' => NULL,
      'channel' => NULL,
    ),
    'template' => 'templates/bpi_well_node'
  );

  $hooks['edit_node'] = array(
    'variables' => array('data' => NULL),
    'template' => 'templates/bpi_edit_node'
  );

  return $hooks;
}

/**
 * 'Add content' page
 *
 * @return array
 *   Form structure
 */
function bpi_add_content() {
  return theme('add_content');
}

/**
 * 'My Nodes' page callback
 *
 * @return array
 *   Page structure
 */
function bpi_my_nodes() {
  return theme('my_nodes');
}

/**
 * 'My Nodes' page form
 *
 * @return array
 *    Form structure
 */
function bpi_my_nodes_form() {
  $form = array();

  // The sorting filter
  $form['sort_filter'] = array(
    '#type' => 'fieldset',
    '#title' => 'SHOW ONLY ITEMS WHERE',
  );

  $form['sort_filter']['status'] = array(
    '#type' => 'select',
    '#title' => 'status',
    '#options' => array(
        'any',
      ),
  );

  $form['sort_filter']['type'] = array(
    '#type' => 'select',
    '#title' => 'type',
    '#options' => array(
        'any',
      ),
  );

  $form['sort_filter']['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Filter'
  );
  // END sort filter

  // Update filter
  $form['update_filter'] = array(
    '#type' => 'fieldset',
    '#title' => 'UPDATE OPTIONS',
  );

  $form['update_filter']['action'] = array(
    '#type' => 'select',
    '#options' => array(
        'Publish selected content',
        'Delete selected content',
      ),
  );
  // END update filter

  $form['update_filter']['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Update'
  );

  return $form;
}

/**
 * The table/grid which contains a list of user's nodes
 *
 * @return array
 *   Form structure
 */
function bpi_my_nodes_grid() {
  $form = array();
  
  $header = array(
    array('data' => t('TITLE'), 'field' => 'node_title'),
    t('TYPE'),
    t('AUTHOR'),
    t('STATUS'),
    array('data' => t('UPDATED'), 'field' => 'node_updated', 'sort' => 'desc'),
    t('OPERATIONS'),
  );

  // @todo
  // Test purpose data for grid/table
  // Remove this after live retrieval
  $rows = array(
    array('Pa gensyn i Helsingor 2011', 'Article', l('inlead', '#'), 'published', '03/08/2011 - 15:50', l('edit', 'admin/bpi/node/edit/1') . '&nbsp;&nbsp;' . l('delete', '#')),
    array('Easy Magazine 2010', 'Article', l('inlead', '#'), 'published', '03/08/2011 - 15:50', l('edit', 'admin/bpi/node/edit/2') . '&nbsp;&nbsp;' . l('delete', '#')),
    array('Easy Screen pa Svendborg Bibliotek', 'Article', l('inlead', '#'), 'published', '03/08/2011 - 15:50', l('edit', 'admin/bpi/node/edit/3') . '&nbsp;&nbsp;' . l('delete', '#')),
  );

  $form['grid'] = array(
    '#type' => 'tableselect',
    '#header' => $header,
    '#options' => $rows,
  );

  return $form;
}

/**
 * 'Syndicated nodes' page callback
 *
 * @return array
 *   Page structure
 */
function bpi_syndicated_nodes() {
  return theme('syndicated_nodes');
}

function bpi_syndicated_nodes_grid() {
  $form = array();

  $header = array(
    array('data' => t('TITLE'), 'field' => 'node_title'),
    t('AUTHOR'),
    t('LIBRARY'),
    array('data' => t('CREATED'), 'field' => 'node_created', 'sort' => 'desc'),
    array('data' => t('SYNDICATED'), 'field' => 'node_syndicated'),
    t('CHANGES'),
  );

  // @todo
  // Test purpose data for grid/table
  // Remove this after live retrieval
  $rows = array(
    array(
      'Pa gensyn i Helsingor 2011',
      'Birgitte Hansen',
      'Gladsaxe Bibliotek',
      '01/04/2011 - 17:51',
      '04/05/2011 - 16:56',
      'NO'),
    array(
      'Easy Magazine 2010',
      'Ulla Terkelsen',
      'Frederiksebrg Bibliotekerne',
      '02/15/2011 - 04:12',
      '04/05/2011 - 16:58',
      'NO'),
    array(
      'Easy Screen pa Svendborg Bibliotek',
      'Barack Obama',
      'Washington Centralbibliotek',
      '03/08/2011 - 14:34',
      '04/05/2011 - 14:34',
      '<strong>YES</strong>'),
  );

  $form['grid'] = array(
    '#type' => 'tableselect',
    '#header' => $header,
    '#options' => $rows,
  );

  return $form;
}

/**
 * 'Channels' page callback
 *
 * @return array
 *   Page structure
 */
function bpi_channels() {
  return theme('channels');
}

/**
 * 'Favorites' page callback
 *
 * @return array
 *   Page structure
 */
function bpi_favorites() {
  return theme('favorites');
}

/**
 * 'Updates' page callback
 *
 * @return array
 *   Page structure
 */
function bpi_updates() {
  return theme('updates');
}

/**
 * 'Search' page callback
 *
 * @return array
 *   Page structure
 */
function bpi_search() {
  return theme('search');
}

function bpi_search_form() {

  $form = array();

  $form['search'] = array(
    '#type' => 'textfield',
    '#title' => 'Search for: ',
    '#required' => TRUE,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Search',
    '#ajax' => array(
      'callback' => 'bpi_search_result'
    ),
  );

  return $form;
}

function bpi_search_result() {
  $commands = array();

  $commands[] = ajax_command_invoke('.page_form', 'hide');
  $commands[] = ajax_command_invoke('.page_result', 'show');

  return array(
    '#type' => 'ajax',
    '#commands' => $commands
  );
}

function bpi_search_filters() {
  $form = array();

  $form['type'] = array(
    '#type' => 'fieldset',
    '#title' => 'TYPE',
    '#prefix' => '<div id="bpi_search_filter">',
  );

  $form['type']['article'] = array(
    '#type' => 'checkbox',
    '#title' => 'Article'
  );

  $form['type']['event'] = array(
    '#type' => 'checkbox',
    '#title' => 'Event'
  );

  $form['type']['review'] = array(
    '#type' => 'checkbox',
    '#title' => 'Review'
  );

  $form['group'] = array(
    '#type' => 'fieldset',
    '#title' => 'TARGET GROUP',
    '#suffix' => '</div>',
  );

  $form['group']['adults'] = array(
    '#type' => 'checkbox',
    '#title' => 'Adults'
  );

  $form['group']['born'] = array(
    '#type' => 'checkbox',
    '#title' => 'Born' // @todo - translate 'Born'
  );

  $form['group']['young'] = array(
    '#type' => 'checkbox',
    '#title' => 'Young'
  );

  return $form;
}

function bpi_well_nodes() {
  $nodes = array();

  // @todo
  // Test purpose data
  // Remove that after live retrieval
  $nodes[] = array(
    'title' => 'Sommerlukket',
    'description' => 'Tekstuddrag fra artikel Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem',
    'read' => FALSE, // @todo - needs translation (dk: laest)
    'rating' => 3,
    'rated' => 17,
    'date' => '13 marts 2011',
    'author' => 'Lisbeth Hollesen',
    'category' => 'Andet',
    'syndicated' => 4,
    'lix' => 56, // @todo - needs translation
    'library' => 'Albertslund',
    'channel' => 'Nu er det sommerferie'
  );

  $nodes[] = array(
    'title' => 'Tirsdagsgodter',
    'description' => 'Tekstuddrag fra artikel Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem',
    'read' => TRUE, // @todo - needs translation (dk: laest)
    'rating' => 3,
    'rated' => 12,
    'date' => '13 marts 2011',
    'author' => 'M. Christensen',
    'category' => 'Andet',
    'syndicated' => 2,
    'lix' => 21, // @todo - needs translation
    'library' => 'Hovedbiblioteket',
    'channel' => 'Slik'
  );

  $output = '';
  foreach($nodes as $v) {
    $output .= theme('well_node', $v);
  }

  return $output;
}


function bpi_node_edit($node_id) {
  // @todo
  // Here should be placed node retrieval routine
  // As for now it's a dummy data, remove after normal fetch

  $data = array(
    'node_data' => array(
      'title' => 'Trololo',
      'teaser' => 'Lorem ipsum dolor sit amet consectetuer adispcing elit',
      'body' => 'As for 2039, a number of professional astronomers predicted that,
        Apophis asteroid, discovered in 2004, could change it\'s orbit in a way
        that it could cross the Earth\'s orbit. Although due to huge amount of gravity
        that Sun is creating, in such large timespan it\'s truly hard to predict how exactly
        the orbit of Apophis will lay through space. In case of direct hit, this 900
        meters rock, could produce an impact equalised to 2000 megatomb nuclear bomb with
        total destruction in range of 60 miles and produce blast wind with a velocity
        700 meters per second...',
      'node_info' => array(
        'pic_copy' => TRUE,
        'references' => TRUE,
        'author' => 'Birgitte Hansen',
        'library' => 'Gladsaxe Bibliotekerne',
        'created' => '04-05-2011 15:10',
        'category' => 'Sports',
        'target' => 'Adults',
        'channel' => array(
          'this_is_nice',
          'favoriteNodes'
        ),
        'lix' => 1823,
        'operations' => array(
          'auto_update' => TRUE,
          'copy_images' => FALSE,
          'local_changes' => FALSE,
          'auto_publish' => FALSE,
          'auto_promote' => FALSE,
          'references_ting' => FALSE,
          'references_links' => FALSE,
          'syndication_changes' => FALSE,
          'view_syndication' => FALSE,
        ),
        'images' => array(),
      )
    )
  );

  return bpi_test(drupal_get_form('bpi_node_edit_form', $data));//theme('edit_node', $data);
}

function bpi_test($form) {
  $output = '';

  $output .= drupal_render($form['title']);

  $output .= drupal_render($form);

  return $output;
}

function bpi_node_edit_form($form, &$form_state, $node_data = array()) {
  $form = array();

  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => 'Title',
    '#required' => TRUE,
    '#value' => (isset($node_data['title'])) ? $node_data['title'] : '',
  );

  $form['body'] = array(
    '#type' => 'textarea',
    '#title' => 'Body',
    '#default_value' => (isset($node_data['body'])) ? $node_data['body'] : '',
  );

  $form['teaser'] = array(
    '#type' => 'textarea',
    '#title' => 'Teaser',
    '#default_value' => (isset($node_data['teaser'])) ? $node_data['teaser'] : '',
  );

  $form['auto_update'] = array(
    '#type' => 'checkbox',
    '#title' => 'Activate auto update?',
    '#default_value' => (
          isset($node_data['node_info']['operations']['auto_update']) &&
          $node_data['node_info']['operations']['auto_update'] == TRUE) ?
            1 : 0,
  );

  $form['copy_images'] = array(
    '#type' => 'checkbox',
    '#title' => 'Copy images?',
    '#default_value' => (
          isset($node_data['node_info']['operations']['copy_images']) &&
          $node_data['node_info']['operations']['copy_images'] == TRUE) ?
            1 : 0,
  );

  $form['local_changes'] = array(
    '#type' => 'checkbox',
    '#title' => 'Make changes locally?',
    '#default_value' => (
          isset($node_data['node_info']['operations']['local_changes']) &&
          $node_data['node_info']['operations']['local_changes'] == TRUE) ?
            1 : 0,
  );

  $form['auto_publish'] = array(
    '#type' => 'checkbox',
    '#title' => 'Auto publish locally?',
    '#default_value' => (
          isset($node_data['node_info']['operations']['auto_publish']) &&
          $node_data['node_info']['operations']['auto_publish'] == TRUE) ?
            1 : 0,
  );

  $form['auto_promote'] = array(
    '#type' => 'checkbox',
    '#title' => 'Auto promote to frontpage?',
    '#default_value' => (
          isset($node_data['node_info']['operations']['auto_promote']) &&
          $node_data['node_info']['operations']['auto_promote'] == TRUE) ?
            1 : 0,
  );

  $form['references_ting'] = array(
    '#type' => 'checkbox',
    '#title' => 'Remove references (TING)?',
    '#default_value' => (
          isset($node_data['node_info']['operations']['references_ting']) &&
          $node_data['node_info']['operations']['references_ting'] == TRUE) ?
            1 : 0,
  );

  $form['references_links'] = array(
    '#type' => 'checkbox',
    '#title' => 'Remove references (links)?',
    '#default_value' => (
          isset($node_data['node_info']['operations']['references_links']) &&
          $node_data['node_info']['operations']['references_links'] == TRUE) ?
            1 : 0,
  );

  $form['syndication_changes'] = array(
    '#type' => 'checkbox',
    '#title' => 'Make changes after syndication?',
    '#default_value' => (
          isset($node_data['node_info']['operations']['syndication_changes']) &&
          $node_data['node_info']['operations']['syndication_changes'] == TRUE) ?
            1 : 0,
  );

  $form['view_syndication'] = array(
    '#type' => 'checkbox',
    '#title' => 'View node after syndication?',
    '#default_value' => (
          isset($node_data['node_info']['operations']['syndication_changes']) &&
          $node_data['node_info']['operations']['view_syndication'] == TRUE) ?
            1 : 0,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Submit'
  );

  return $form;
}

function bpi_node_edit_form_submit($form, &$form_state) {
  var_dump($_POST);die();
}