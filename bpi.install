<?php
/**
 * @file
 *
 */

/**
 * Implements hook_install().
 */
function bpi_install() {
  // Check for article content type and install if needed
  $is_article_type = db_query("SELECT COUNT(*) FROM {node_type} WHERE name='Article'")->fetchField(0);
  
  if ($is_article_type == 0) {
    $types = array(
      array(
        'type' => 'article',
        'name' => st('Article'),
        'base' => 'node_content',
        'description' => st('Use <em>articles</em> for time-sensitive content like news, press releases or blog posts.'),
        'custom' => 1,
        'modified' => 1,
        'locked' => 0,
      ),
    );

    foreach ($types as $type) {
      $type = node_type_set_defaults($type);
      node_type_save($type);
      node_add_body_field($type);
    }
  }
  
  $count = db_query("SELECT COUNT(*) AS CNT FROM {node} WHERE type = 'article'")->fetchField(0);

  // Create the channels
  db_insert('bpi_channel')
    ->fields(array('name'))
    ->values(array('name' => 'EURONEWS'))
    ->values(array('name' => 'BBC'))
    ->execute();

  // Fetch the channels
  $cid = db_select('bpi_channel')
    ->fields('bpi_channel', array('id'))
    ->execute()
    ->fetchAll();

  if ($count < 3) {
    global $user;

    for ($i = 0; $i < 10; $i++) {
      $new_node = new stdClass();
      // Node type
      $new_node->type = 'article';
      // Node language, un - default
      $new_node->language = 'und';
      // Node status, 1 - published
      $new_node->status = 1;
      // Node promotion, 1 - show on main page
      $new_node->promote = 0;
      // Node author id
      $new_node->uid = $user->uid;
      // Random value of node syndication
      $new_node->syndicated = mt_rand(0, 1);
      // Random node library owner
      $new_node->library = mt_rand(10000, 90000);
      // Random node channel from preinstalled channels
      $new_node->channel = $cid[mt_rand(0, count($cid) - 1)]->id;
      // Random values of node favorite flags
      $new_node->favorites = serialize(array(mt_rand(0, 1), mt_rand(0, 1), 0, 0));
      // Random number of node syndication by other libraries
      $new_node->publish_status = mt_rand(0, 5);
      // Random value which indicates whether the node is in the well
      $new_node->in_well = $new_node->syndicated ? 0 : mt_rand(0, 1);
      // Node body format, 1 - filtered html
      $new_node->body['und']['0']['format'] = 1;
      // Node body content
      $new_node->body['und']['0']['value'] = 'Dummy content created at ' . date('Y-m-d H:i:s', time()) . ' with index ' . $i . '. '
        . ($new_node->syndicated ? " This node is syndicated." : "This node is local.");
      // Node title
      $new_node->title = 'Dummy ' . ($new_node->syndicated ? "syndicated " : "") . 'node ' . $i;

      // Save the node
      node_save($new_node);
    }
  }
}

/**
 * Implements hook_schema().
 *
 * @return
 *   Array of table definitions
 */
function bpi_schema() {
  $schema['bpi_node'] = array(
    'description' => 'Custom node data for BPI prototype',
    'fields' => array(
      'id' => array(
        'description' => 'Record id',
        'type' => 'serial'
      ),
      'nid' => array(
        'description' => 'Node id which should contain custom data',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'syndicated' => array(
        'description' => 'Whether node is syndicated',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0
      ),
      'library' => array(
        'description' => 'Library code, owner of the node',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 123456,
      ),
      'category' => array(
        'description' => 'Category',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'audience' => array(
        'description' => 'Target audience',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'channel' => array(
        'description' => 'Node\'s assigned channel',
        'type' => 'int',
        'unsigned' => TRUE,
      ),
      'favorites' => array(
        'description' => 'Whether the node is marked favorite',
        'type' => 'varchar',
        'length' => 256,
        'not null' => TRUE,
        'default' => '',
      ),
      'publish_status' => array(
        'description' => 'Whether node is syndicated by other libraries',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'in_well' => array(
        'description' => 'Whether the node is in the well',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('id'),
  );

  $schema['bpi_channel'] = array(
    'description' => 'Custom channel data for BPI prototype',
    'fields' => array(
      'id' => array(
        'description' => 'Entry id',
        'type' => 'serial',
        'not null' => TRUE,
      ),
      'name' => array(
        'description' => 'Channel name',
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
      )
    ),
    'primary key' => array('id'),
  );

  return $schema;
}

/**
 * Implements hook_uninstall().
 *
 * Deletes also the nodes created with install.
 */
function bpi_uninstall() {
  $nodes = db_select('bpi_node')
    ->fields('bpi_node', array('nid'))
    ->execute()
    ->fetchAll();

  foreach($nodes as $k => $v) {
    db_delete('node')
      ->condition('nid', $v->nid)
      ->execute();
  }

  db_drop_table('bpi_node');
  db_drop_table('bpi_channel');
}
